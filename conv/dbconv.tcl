#!/usr/bin/tclsh

if { $argc <= 0 } {
  puts "usage: $argv0 <directory>"
  exit 1
}

set dir [lindex $argv 0]
if { ! [file exists $dir] || ! [file isdirectory $dir] } {
  puts "Invalid directory $dir"
  exit 1
}

set hsize 128
set rsize 2048

puts "## Converting: musicdb.txt"
set fh [open [file join $dir musicdb.txt] r]
gets $fh line
gets $fh line
gets $fh line
gets $fh line
regexp {^#RAMAX=(\d+)$} $line all racount
close $fh

set fh [open [file join data musicdb.dat] w]

source [file joi $dir musicdb.txt]

set c 0
dict for {fn data} $musicdbList {
  incr c
}

puts $fh "#VERSION=10"
puts $fh "# Do not edit this file."
puts $fh "#RASIZE=2048"
puts $fh "#RACOUNT=$c"

set newrrn 1
dict for {fn data} $musicdbList {
  seek $fh [expr {([dict get $data rrn] - 1) * $rsize + $hsize}]
  puts $fh "FILE\n..$fn"

  # sort it now, make it easier
  foreach {tag} [lsort [dict keys $data]] {
    if { $tag eq "BDJSYNCID" } {
      # not wanted
      continue
    }
    if { $tag eq "ALBART" } {
      # not wanted - old, leftover
      continue
    }
    if { $tag eq "DURATION_HMS" } { continue }
    if { $tag eq "DURATION_STR" } { continue }
    if { $tag eq "FILE" } {
      # already
      continue
    }
    if { $tag eq "rrn" } {
      # make sure rrn is correct
      set value $newrrn
    }
    set value [dict get $data $tag]

    if { $tag eq "VOLUMEADJUSTPERC" } {
      set value [expr {int ($value)}]
      set value [expr {double ($value) / 10.0}]
    }

    if { $tag eq "SONGSTART" || $tag eq "SONGEND" } {
      if { $value ne {} && $value ne "-1" } {
        regexp {(\d+):(\d+)} $value all min sec
        set value [expr {($min * 60 + $sec)*1000}]
      }
    }

    if { $tag eq "rrn" } { set tag RRN }
    if { $tag eq "DURATION" } {
      set value [expr {int($value * 1000)}]
    }
    puts $fh "$tag\n..$value"
  }
  incr newrrn
}

# need to make sure file is formatted correctly.
# write out a null at the end-1
seek $fh [expr {($newrrn - 1) * $rsize + $hsize - 1}]
puts -nonewline $fh "\0"

close $fh
exit 0
